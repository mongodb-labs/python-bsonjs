name: Python Wheels

on: [push, pull_request]

jobs:
  build-non-linux-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-2019]
        python-version: [3.6]
    name: Build CPython ${{ matrix.python-version }}-${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheels
        working-directory: .
        shell: bash
        run: |
          ./build-wheels.sh .
      - uses: actions/upload-artifact@v2
        with:
          name: python_bsonjs-${{ matrix.python-version }}-${{ matrix.os }}-wheel
          path: ./dist/*.whl
          if-no-files-found: error
  test-non-linux-wheels:
    needs: build-non-linux-wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-2019]
        python-version: [3.6, 3.7, 3.8, 3.9, "3.10"]
    name: Test CPython ${{ matrix.python-version }}-${{ matrix.os }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download a previously created wheel
        uses: actions/download-artifact@v2
        with:
          name: python_bsonjs-3.6-${{ matrix.os }}-wheel
      - name: Test wheel
        shell: bash
        run: |
          python -m pip install -U pip
          python -m pip install *.whl
          python -c "from bsonjs import dumps"
  # Linux
  build-manylinux-wheels:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Cannot have '/' in artifact names, so hardcode 'quay.io/pypa/'
        container: ['manylinux2010_x86_64', 'manylinux2014_x86_64']
        python-version: ['cp36-cp36m']
    name: Build CPython ${{ matrix.python-version }}-${{ matrix.container }}
    steps:
      - uses: actions/checkout@v2
      - name: Build wheels
        working-directory: .
        run: |
          docker run --rm --volume `pwd`:/python --workdir /python --env PLAT=${{ matrix.container }} --env PYTHON_BINARY=/opt/python/${{ matrix.python-version }}/bin/python quay.io/pypa/${{ matrix.container }} ./build-wheels.sh .
      - uses: actions/upload-artifact@v2
        with:
          name: python_bsonjs-3.6-${{ matrix.container }}-wheel
          path: ./dist/*.whl
          if-no-files-found: error
  test-manylinux-wheels:
    runs-on: ubuntu-latest
    needs: build-manylinux-wheels
    strategy:
      matrix:
        container: ['manylinux2010_x86_64', 'manylinux2014_x86_64']
        python-version: ['cp36-cp36m', 'cp37-cp37m', 'cp38-cp38',
                         'cp39-cp39', 'cp310-cp310']
    name: Test CPython ${{ matrix.python-version }}-${{ matrix.container }}
    steps:
      - name: Make dir
        run: mkdir ~/python/
      - name: Download a previously created wheel
        uses: actions/download-artifact@v2
        with:
          name: python_bsonjs-3.6-${{ matrix.container }}-wheel
          path: ~/python/
      - name: Test wheel
        run: |
          docker run --rm --volume `pwd`:/python quay.io/pypa/${{ matrix.container }} /bin/bash -c "/opt/python/${{ matrix.python-version }}/bin/python -m pip install -U pip && /opt/python/${{ matrix.python-version }}/bin/python -m pip install ~/python/ && /opt/python/${{ matrix.python-version }}/bin/python -c 'from bsonjs import dumps'"
  # Collect all built wheels
  collect-wheels:
    runs-on: ubuntu-latest
    needs: [build-non-linux-wheels, build-manylinux-wheels]
    name: Download Wheels
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
      - uses: actions/upload-artifact@v2
        with:
          name: nix-wheels
          path: "*-wheel"